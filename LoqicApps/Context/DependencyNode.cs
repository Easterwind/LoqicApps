//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	/// <summary>
	/// The representation of a component dependency node in CRM.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependencynode")]
	public partial class DependencyNode : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string BaseSolutionId = "basesolutionid";
			public const string ComponentType = "componenttype";
			public const string DependencyNodeId = "dependencynodeid";
			public const string Id = "dependencynodeid";
			public const string IntroducedVersion = "introducedversion";
			public const string IsSharedComponent = "issharedcomponent";
			public const string ObjectId = "objectid";
			public const string ParentId = "parentid";
			public const string TopSolutionId = "topsolutionid";
			public const string VersionNumber = "versionnumber";
			public const string solution_base_dependencynode = "solution_base_dependencynode";
			public const string solution_top_dependencynode = "solution_top_dependencynode";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DependencyNode() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "dependencynode";
		
		public const string EntitySchemaName = "DependencyNode";
		
		public const string PrimaryIdAttribute = "dependencynodeid";
		
		public const string EntityLogicalCollectionName = "dependencynodes";
		
		public const string EntitySetName = "dependencynodes";
		
		public const int EntityTypeCode = 7106;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the solution
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("basesolutionid")]
		public Microsoft.Xrm.Sdk.EntityReference BaseSolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("basesolutionid");
			}
		}
		
		/// <summary>
		/// The type code of the component.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componenttype")]
		public virtual ComponentType? ComponentType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ComponentType?)(EntityOptionSetEnum.GetEnum(this, "componenttype")));
			}
		}
		
		/// <summary>
		/// Unique identifier of the dependency node.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dependencynodeid")]
		public System.Nullable<System.Guid> DependencyNodeId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("dependencynodeid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dependencynodeid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				base.Id = value;
			}
		}
		
		/// <summary>
		/// Introduced version for the component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
		public System.Nullable<double> IntroducedVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<double>>("introducedversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// Whether this component is shared by two solutions with the same publisher.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("issharedcomponent")]
		public System.Nullable<bool> IsSharedComponent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("issharedcomponent");
			}
		}
		
		/// <summary>
		/// Unique identifier of the object with which the node is associated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("objectid")]
		public System.Nullable<System.Guid> ObjectId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("objectid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ObjectId");
				this.SetAttributeValue("objectid", value);
				this.OnPropertyChanged("ObjectId");
			}
		}
		
		/// <summary>
		/// Unique identifier of the parent entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentid")]
		public System.Nullable<System.Guid> ParentId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("parentid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the top solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("topsolutionid")]
		public Microsoft.Xrm.Sdk.EntityReference TopSolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("topsolutionid");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N dependencynode_ancestor_dependency
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("dependencynode_ancestor_dependency")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.Dependency> dependencynode_ancestor_dependency
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.Dependency>("dependencynode_ancestor_dependency", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("dependencynode_ancestor_dependency");
				this.SetRelatedEntities<CrmEarlyBound.Dependency>("dependencynode_ancestor_dependency", null, value);
				this.OnPropertyChanged("dependencynode_ancestor_dependency");
			}
		}
		
		/// <summary>
		/// 1:N dependencynode_descendent_dependency
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("dependencynode_descendent_dependency")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.Dependency> dependencynode_descendent_dependency
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.Dependency>("dependencynode_descendent_dependency", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("dependencynode_descendent_dependency");
				this.SetRelatedEntities<CrmEarlyBound.Dependency>("dependencynode_descendent_dependency", null, value);
				this.OnPropertyChanged("dependencynode_descendent_dependency");
			}
		}
		
		/// <summary>
		/// 1:N userentityinstancedata_dependencynode
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_dependencynode")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.UserEntityInstanceData> userentityinstancedata_dependencynode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_dependencynode", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("userentityinstancedata_dependencynode");
				this.SetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_dependencynode", null, value);
				this.OnPropertyChanged("userentityinstancedata_dependencynode");
			}
		}
		
		/// <summary>
		/// N:1 solution_base_dependencynode
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("basesolutionid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("solution_base_dependencynode")]
		public CrmEarlyBound.Solution solution_base_dependencynode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Solution>("solution_base_dependencynode", null);
			}
		}
		
		/// <summary>
		/// N:1 solution_top_dependencynode
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("topsolutionid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("solution_top_dependencynode")]
		public CrmEarlyBound.Solution solution_top_dependencynode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Solution>("solution_top_dependencynode", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DependencyNode(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["dependencynodeid"] = base.Id;
                        break;
                    case "dependencynodeid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}