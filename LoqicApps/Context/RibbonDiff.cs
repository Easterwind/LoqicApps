//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	/// <summary>
	/// All layout customizations to be applied to the ribbons, which contain only the differences from the base ribbon.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbondiff")]
	public partial class RibbonDiff : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string ComponentState = "componentstate";
			public const string ContextGroupId = "contextgroupid";
			public const string DiffId = "diffid";
			public const string DiffType = "difftype";
			public const string Entity = "entity";
			public const string IsAppAware = "isappaware";
			public const string IsManaged = "ismanaged";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RDX = "rdx";
			public const string RibbonCustomizationId = "ribboncustomizationid";
			public const string RibbonDiffId = "ribbondiffid";
			public const string Id = "ribbondiffid";
			public const string RibbonDiffUniqueId = "ribbondiffuniqueid";
			public const string Sequence = "sequence";
			public const string SolutionId = "solutionid";
			public const string TabId = "tabid";
			public const string VersionNumber = "versionnumber";
			public const string organization_ribbon_diff = "organization_ribbon_diff";
			public const string RibbonCustomization_RibbonDiff = "RibbonCustomization_RibbonDiff";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public RibbonDiff() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "ribbondiff";
		
		public const string EntitySchemaName = "RibbonDiff";
		
		public const string PrimaryIdAttribute = "ribbondiffid";
		
		public const string EntityLogicalCollectionName = "ribbondiffs";
		
		public const string EntitySetName = "ribbondiffs";
		
		public const int EntityTypeCode = 1130;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public virtual ComponentState? ComponentState
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ComponentState?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
			}
		}
		
		/// <summary>
		/// Unique identifier of the context group for this tab. If this ribbon definition adds a new tab, then it is a contextual tab.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("contextgroupid")]
		public System.Nullable<System.Guid> ContextGroupId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("contextgroupid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ContextGroupId");
				this.SetAttributeValue("contextgroupid", value);
				this.OnPropertyChanged("ContextGroupId");
			}
		}
		
		/// <summary>
		/// The string ID of this ribbon definition.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("diffid")]
		public string DiffId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("diffid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DiffId");
				this.SetAttributeValue("diffid", value);
				this.OnPropertyChanged("DiffId");
			}
		}
		
		/// <summary>
		/// Indicates the type of ribbon definition.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("difftype")]
		public virtual RibbonDiff_DiffType? DiffType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((RibbonDiff_DiffType?)(EntityOptionSetEnum.GetEnum(this, "difftype")));
			}
		}
		
		/// <summary>
		/// The entity this rule applies to, also the entity this rule was imported from, will be exported to.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entity")]
		public string Entity
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("entity");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Entity");
				this.SetAttributeValue("entity", value);
				this.OnPropertyChanged("Entity");
			}
		}
		
		/// <summary>
		/// Information about whether the ribbondiff is associated with app module.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isappaware")]
		public System.Nullable<bool> IsAppAware
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isappaware");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
		public System.Nullable<bool> IsManaged
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public Microsoft.Xrm.Sdk.EntityReference OrganizationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
		public System.Nullable<System.DateTime> OverwriteTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Ribbon definition XML string that contains one change action.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rdx")]
		public string RDX
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rdx");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RDX");
				this.SetAttributeValue("rdx", value);
				this.OnPropertyChanged("RDX");
			}
		}
		
		/// <summary>
		/// Unique identifier of the ribbon customization with which the ribbon command is associated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ribboncustomizationid")]
		public Microsoft.Xrm.Sdk.EntityReference RibbonCustomizationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ribboncustomizationid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RibbonCustomizationId");
				this.SetAttributeValue("ribboncustomizationid", value);
				this.OnPropertyChanged("RibbonCustomizationId");
			}
		}
		
		/// <summary>
		/// Unique identifier.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ribbondiffid")]
		public System.Nullable<System.Guid> RibbonDiffId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ribbondiffid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RibbonDiffId");
				this.SetAttributeValue("ribbondiffid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("RibbonDiffId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ribbondiffid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.RibbonDiffId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the form used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ribbondiffuniqueid")]
		public System.Nullable<System.Guid> RibbonDiffUniqueId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ribbondiffuniqueid");
			}
		}
		
		/// <summary>
		/// Sequence in which the definition is to be applied.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sequence")]
		public System.Nullable<int> Sequence
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("sequence");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Sequence");
				this.SetAttributeValue("sequence", value);
				this.OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
		public System.Nullable<System.Guid> SolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// The ID of the tab this definition applies to.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("tabid")]
		public string TabId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("tabid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("TabId");
				this.SetAttributeValue("tabid", value);
				this.OnPropertyChanged("TabId");
			}
		}
		
		/// <summary>
		/// Represents a version of customizations to be synchronized with the Microsoft Dynamics 365 client for Outlook.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N RibbonDiff_RibbonTabToCommandMap
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RibbonDiff_RibbonTabToCommandMap")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.RibbonTabToCommandMap> RibbonDiff_RibbonTabToCommandMap
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.RibbonTabToCommandMap>("RibbonDiff_RibbonTabToCommandMap", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RibbonDiff_RibbonTabToCommandMap");
				this.SetRelatedEntities<CrmEarlyBound.RibbonTabToCommandMap>("RibbonDiff_RibbonTabToCommandMap", null, value);
				this.OnPropertyChanged("RibbonDiff_RibbonTabToCommandMap");
			}
		}
		
		/// <summary>
		/// 1:N userentityinstancedata_ribbondiff
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_ribbondiff")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.UserEntityInstanceData> userentityinstancedata_ribbondiff
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_ribbondiff", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("userentityinstancedata_ribbondiff");
				this.SetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_ribbondiff", null, value);
				this.OnPropertyChanged("userentityinstancedata_ribbondiff");
			}
		}
		
		/// <summary>
		/// N:1 organization_ribbon_diff
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("organization_ribbon_diff")]
		public CrmEarlyBound.Organization organization_ribbon_diff
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Organization>("organization_ribbon_diff", null);
			}
		}
		
		/// <summary>
		/// N:1 RibbonCustomization_RibbonDiff
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ribboncustomizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RibbonCustomization_RibbonDiff")]
		public CrmEarlyBound.RibbonCustomization RibbonCustomization_RibbonDiff
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.RibbonCustomization>("RibbonCustomization_RibbonDiff", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RibbonCustomization_RibbonDiff");
				this.SetRelatedEntity<CrmEarlyBound.RibbonCustomization>("RibbonCustomization_RibbonDiff", null, value);
				this.OnPropertyChanged("RibbonCustomization_RibbonDiff");
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public RibbonDiff(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["ribbondiffid"] = base.Id;
                        break;
                    case "ribbondiffid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}