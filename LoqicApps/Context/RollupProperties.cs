//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum RollupPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	/// <summary>
	/// Stores properties related to rollup fields.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupproperties")]
	public partial class RollupProperties : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AggregateAttributeLogicalName = "aggregateattributelogicalname";
			public const string AggregateEntityLogicalName = "aggregateentitylogicalname";
			public const string AggregateEntityTypeCode = "aggregateentitytypecode";
			public const string AggregateFilterAttributes = "aggregatefilterattributes";
			public const string AggregateRelationshipName = "aggregaterelationshipname";
			public const string AggregateType = "aggregatetype";
			public const string AllowHierarchyOnSource = "allowhierarchyonsource";
			public const string BootstrapCurrentDepth = "bootstrapcurrentdepth";
			public const string BootstrapRetryCount = "bootstrapretrycount";
			public const string BootstrapRollupAsyncJobId = "bootstraprollupasyncjobid";
			public const string BootstrapStepNumber = "bootstrapstepnumber";
			public const string BootstrapTargetPointer = "bootstraptargetpointer";
			public const string DataType = "datatype";
			public const string IncrementalRollupAsyncJobId = "incrementalrollupasyncjobid";
			public const string InitialValueCalculationStatus = "initialvaluecalculationstatus";
			public const string IsActivityPartyIncluded = "isactivitypartyincluded";
			public const string LastCalculationTime = "lastcalculationtime";
			public const string RollupAttributeLogicalName = "rollupattributelogicalname";
			public const string RollupEntityBaseTableName = "rollupentitybasetablename";
			public const string RollupEntityLogicalName = "rollupentitylogicalname";
			public const string RollupEntityPrimaryKeyPhysicalName = "rollupentityprimarykeyphysicalname";
			public const string RollupEntityTypeCode = "rollupentitytypecode";
			public const string RollupFilterAttributes = "rollupfilterattributes";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string Id = "rolluppropertiesid";
			public const string RollupStateAttributePhysicalName = "rollupstateattributephysicalname";
			public const string SourceHierarchicalRelationshipName = "sourcehierarchicalrelationshipname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string VersionNumber = "versionnumber";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public RollupProperties() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "rollupproperties";
		
		public const string EntitySchemaName = "RollupProperties";
		
		public const string PrimaryIdAttribute = "rolluppropertiesid";
		
		public const string EntityLogicalCollectionName = "rolluppropertiescollection";
		
		public const string EntitySetName = "rolluppropertiescollection";
		
		public const int EntityTypeCode = 9510;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Logical name of target attribute
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregateattributelogicalname")]
		public string AggregateAttributeLogicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aggregateattributelogicalname");
			}
		}
		
		/// <summary>
		/// Logical name of target entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregateentitylogicalname")]
		public string AggregateEntityLogicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aggregateentitylogicalname");
			}
		}
		
		/// <summary>
		/// Type code of aggregate entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregateentitytypecode")]
		public System.Nullable<int> AggregateEntityTypeCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("aggregateentitytypecode");
			}
		}
		
		/// <summary>
		/// Filter criteria for target
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregatefilterattributes")]
		public string AggregateFilterAttributes
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aggregatefilterattributes");
			}
		}
		
		/// <summary>
		/// Relationship name of the source-target relationship.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregaterelationshipname")]
		public string AggregateRelationshipName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aggregaterelationshipname");
			}
		}
		
		/// <summary>
		/// Type of aggregation to perform
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aggregatetype")]
		public virtual RollupProperties_AggregateType? AggregateType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((RollupProperties_AggregateType?)(EntityOptionSetEnum.GetEnum(this, "aggregatetype")));
			}
		}
		
		/// <summary>
		/// Allow source entity to be hierarchical
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("allowhierarchyonsource")]
		public System.Nullable<bool> AllowHierarchyOnSource
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("allowhierarchyonsource");
			}
		}
		
		/// <summary>
		/// Depth used for bootstrap calculations
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bootstrapcurrentdepth")]
		public System.Nullable<int> BootstrapCurrentDepth
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("bootstrapcurrentdepth");
			}
		}
		
		/// <summary>
		/// Retry count for bootstrap
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bootstrapretrycount")]
		public System.Nullable<int> BootstrapRetryCount
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("bootstrapretrycount");
			}
		}
		
		/// <summary>
		/// Unique identifier representing the mass calculate async job id.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bootstraprollupasyncjobid")]
		public System.Nullable<System.Guid> BootstrapRollupAsyncJobId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("bootstraprollupasyncjobid");
			}
		}
		
		/// <summary>
		/// Step number to start bootstrap execution
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bootstrapstepnumber")]
		public System.Nullable<int> BootstrapStepNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("bootstrapstepnumber");
			}
		}
		
		/// <summary>
		/// Target pointer used for bootstrap calculations
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bootstraptargetpointer")]
		public System.Nullable<int> BootstrapTargetPointer
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("bootstraptargetpointer");
			}
		}
		
		/// <summary>
		/// Rollup field data type
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("datatype")]
		public string DataType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("datatype");
			}
		}
		
		/// <summary>
		/// Unique identifier representing the calculate entity async job id.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("incrementalrollupasyncjobid")]
		public System.Nullable<System.Guid> IncrementalRollupAsyncJobId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("incrementalrollupasyncjobid");
			}
		}
		
		/// <summary>
		/// Status of initial value calculation.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("initialvaluecalculationstatus")]
		public virtual RollupProperties_InitialValueCalculationStatus? InitialValueCalculationStatus
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((RollupProperties_InitialValueCalculationStatus?)(EntityOptionSetEnum.GetEnum(this, "initialvaluecalculationstatus")));
			}
		}
		
		/// <summary>
		/// Flag indicating whether Activity Party is included
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isactivitypartyincluded")]
		public System.Nullable<int> IsActivityPartyIncluded
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("isactivitypartyincluded");
			}
		}
		
		/// <summary>
		/// Last time when calculations were performed for this rollup field.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastcalculationtime")]
		public System.Nullable<System.DateTime> LastCalculationTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("lastcalculationtime");
			}
		}
		
		/// <summary>
		/// Logical name of source attribute
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupattributelogicalname")]
		public string RollupAttributeLogicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupattributelogicalname");
			}
		}
		
		/// <summary>
		/// Base Table Name Of Rollup Entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupentitybasetablename")]
		public string RollupEntityBaseTableName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupentitybasetablename");
			}
		}
		
		/// <summary>
		/// Logical name of source entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupentitylogicalname")]
		public string RollupEntityLogicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupentitylogicalname");
			}
		}
		
		/// <summary>
		/// Physical Name of Primary Key Of Rollup Entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupentityprimarykeyphysicalname")]
		public string RollupEntityPrimaryKeyPhysicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupentityprimarykeyphysicalname");
			}
		}
		
		/// <summary>
		/// Type code of rollup entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupentitytypecode")]
		public System.Nullable<int> RollupEntityTypeCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("rollupentitytypecode");
			}
		}
		
		/// <summary>
		/// Filter criteria for source
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupfilterattributes")]
		public string RollupFilterAttributes
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupfilterattributes");
			}
		}
		
		/// <summary>
		/// Unique identifier of the current record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rolluppropertiesid")]
		public System.Nullable<System.Guid> RollupPropertiesId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("rolluppropertiesid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rolluppropertiesid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				base.Id = value;
			}
		}
		
		/// <summary>
		/// Physical Name of Rollup State Attribute
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rollupstateattributephysicalname")]
		public string RollupStateAttributePhysicalName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rollupstateattributephysicalname");
			}
		}
		
		/// <summary>
		/// Relationship name of the source hierarchical relationship
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcehierarchicalrelationshipname")]
		public string SourceHierarchicalRelationshipName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("sourcehierarchicalrelationshipname");
			}
		}
		
		/// <summary>
		/// Status of the Rollup.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public System.Nullable<CrmEarlyBound.RollupPropertiesState> StateCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("statecode");
				if ((optionSet != null))
				{
					return ((CrmEarlyBound.RollupPropertiesState)(System.Enum.ToObject(typeof(CrmEarlyBound.RollupPropertiesState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
		}
		
		/// <summary>
		/// Additional information about status of the rollup properties.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual RollupProperties_StatusCode? StatusCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((RollupProperties_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
		}
		
		/// <summary>
		/// Version number of rollup.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N rollupjob_rollupproperties
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("rollupjob_rollupproperties")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.RollupJob> rollupjob_rollupproperties
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.RollupJob>("rollupjob_rollupproperties", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("rollupjob_rollupproperties");
				this.SetRelatedEntities<CrmEarlyBound.RollupJob>("rollupjob_rollupproperties", null, value);
				this.OnPropertyChanged("rollupjob_rollupproperties");
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public RollupProperties(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["rolluppropertiesid"] = base.Id;
                        break;
                    case "rolluppropertiesid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}