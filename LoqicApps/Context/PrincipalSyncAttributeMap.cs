//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	/// <summary>
	/// Maps security principals (users and teams) to sync attribute mappings.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalsyncattributemap")]
	public partial class PrincipalSyncAttributeMap : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AllowedSyncDirection = "allowedsyncdirection";
			public const string AttributeCRMDisplayName = "attributecrmdisplayname";
			public const string AttributeCRMName = "attributecrmname";
			public const string AttributeExchangeDisplayName = "attributeexchangedisplayname";
			public const string AttributeExchangeName = "attributeexchangename";
			public const string ComputedProperties = "computedproperties";
			public const string DefaultSyncDirection = "defaultsyncdirection";
			public const string EntityTypeCode1 = "entitytypecode";
			public const string IsComputed = "iscomputed";
			public const string MappingName = "mappingname";
			public const string OrganizationId = "organizationid";
			public const string ParentPrincipalSyncAttributeMappingId = "parentprincipalsyncattributemappingid";
			public const string PrincipalId = "principalid";
			public const string PrincipalSyncAttributeMapId = "principalsyncattributemapid";
			public const string Id = "principalsyncattributemapid";
			public const string SyncDirection = "syncdirection";
			public const string VersionNumber = "versionnumber";
			public const string lk_principalsyncattributemap_organizationid = "lk_principalsyncattributemap_organizationid";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "principalsyncattributemap";
		
		public const string EntitySchemaName = "PrincipalSyncAttributeMap";
		
		public const string PrimaryIdAttribute = "principalsyncattributemapid";
		
		public const string EntityLogicalCollectionName = "principalsyncattributemaps";
		
		public const string EntitySetName = "principalsyncattributemaps";
		
		public const int EntityTypeCode = 1404;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Specifies allowed sync directions.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("allowedsyncdirection")]
		public System.Nullable<int> AllowedSyncDirection
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("allowedsyncdirection");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AllowedSyncDirection");
				this.SetAttributeValue("allowedsyncdirection", value);
				this.OnPropertyChanged("AllowedSyncDirection");
			}
		}
		
		/// <summary>
		/// CRM Attribute Display Name.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("attributecrmdisplayname")]
		public string AttributeCRMDisplayName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("attributecrmdisplayname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AttributeCRMDisplayName");
				this.SetAttributeValue("attributecrmdisplayname", value);
				this.OnPropertyChanged("AttributeCRMDisplayName");
			}
		}
		
		/// <summary>
		/// CRM Attribute Name.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("attributecrmname")]
		public string AttributeCRMName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("attributecrmname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AttributeCRMName");
				this.SetAttributeValue("attributecrmname", value);
				this.OnPropertyChanged("AttributeCRMName");
			}
		}
		
		/// <summary>
		/// Exchange Attribute Display Name.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("attributeexchangedisplayname")]
		public string AttributeExchangeDisplayName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("attributeexchangedisplayname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AttributeExchangeDisplayName");
				this.SetAttributeValue("attributeexchangedisplayname", value);
				this.OnPropertyChanged("AttributeExchangeDisplayName");
			}
		}
		
		/// <summary>
		/// Exchange Attribute Name.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("attributeexchangename")]
		public string AttributeExchangeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("attributeexchangename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AttributeExchangeName");
				this.SetAttributeValue("attributeexchangename", value);
				this.OnPropertyChanged("AttributeExchangeName");
			}
		}
		
		/// <summary>
		/// Computed Properties.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("computedproperties")]
		public string ComputedProperties
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("computedproperties");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ComputedProperties");
				this.SetAttributeValue("computedproperties", value);
				this.OnPropertyChanged("ComputedProperties");
			}
		}
		
		/// <summary>
		/// Default Sync Direction
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("defaultsyncdirection")]
		public virtual PrincipalSyncAttributeMapping_SyncDirection? DefaultSyncDirection
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((PrincipalSyncAttributeMapping_SyncDirection?)(EntityOptionSetEnum.GetEnum(this, "defaultsyncdirection")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DefaultSyncDirection");
				this.SetAttributeValue("defaultsyncdirection", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("DefaultSyncDirection");
			}
		}
		
		/// <summary>
		/// Object type code for the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entitytypecode")]
		public string EntityTypeCode1
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("entitytypecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("EntityTypeCode1");
				this.SetAttributeValue("entitytypecode", value);
				this.OnPropertyChanged("EntityTypeCode1");
			}
		}
		
		/// <summary>
		/// Indicates whether the mapping is a computed property
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscomputed")]
		public System.Nullable<bool> IsComputed
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("iscomputed");
			}
		}
		
		/// <summary>
		/// Mapping Name.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("mappingname")]
		public string MappingName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("mappingname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("MappingName");
				this.SetAttributeValue("mappingname", value);
				this.OnPropertyChanged("MappingName");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated organization.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public Microsoft.Xrm.Sdk.EntityReference OrganizationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// Parent Sync-Attribute Mapping to which this mapping belongs
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentprincipalsyncattributemappingid")]
		public Microsoft.Xrm.Sdk.EntityReference ParentPrincipalSyncAttributeMappingId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("parentprincipalsyncattributemappingid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ParentPrincipalSyncAttributeMappingId");
				this.SetAttributeValue("parentprincipalsyncattributemappingid", value);
				this.OnPropertyChanged("ParentPrincipalSyncAttributeMappingId");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalid")]
		public System.Nullable<System.Guid> PrincipalId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("principalid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("PrincipalId");
				this.SetAttributeValue("principalid", value);
				this.OnPropertyChanged("PrincipalId");
			}
		}
		
		/// <summary>
		/// Unique identifier of the principal sync attribute mapping.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalsyncattributemapid")]
		public System.Nullable<System.Guid> PrincipalSyncAttributeMapId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("principalsyncattributemapid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("PrincipalSyncAttributeMapId");
				this.SetAttributeValue("principalsyncattributemapid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("PrincipalSyncAttributeMapId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalsyncattributemapid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.PrincipalSyncAttributeMapId = value;
			}
		}
		
		/// <summary>
		/// Sync Direction
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("syncdirection")]
		public virtual PrincipalSyncAttributeMapping_SyncDirection? SyncDirection
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((PrincipalSyncAttributeMapping_SyncDirection?)(EntityOptionSetEnum.GetEnum(this, "syncdirection")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SyncDirection");
				this.SetAttributeValue("syncdirection", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("SyncDirection");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// N:1 lk_principalsyncattributemap_organizationid
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_principalsyncattributemap_organizationid")]
		public CrmEarlyBound.Organization lk_principalsyncattributemap_organizationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Organization>("lk_principalsyncattributemap_organizationid", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["principalsyncattributemapid"] = base.Id;
                        break;
                    case "principalsyncattributemapid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}