//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	/// <summary>
	/// Entity to hold replication backlog tasks. For internal use only.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("replicationbacklog")]
	public partial class ReplicationBacklog : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string Data = "data";
			public const string ReplicationBacklogId = "replicationbacklogid";
			public const string Id = "replicationbacklogid";
			public const string ReplicationBacklogType = "replicationbacklogtype";
			public const string TargetDatacenterId = "targetdatacenterid";
			public const string TargetObjectId = "targetobjectid";
			public const string replicationbacklog_target_report = "replicationbacklog_target_report";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ReplicationBacklog() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "replicationbacklog";
		
		public const string EntitySchemaName = "ReplicationBacklog";
		
		public const string PrimaryIdAttribute = "replicationbacklogid";
		
		public const string EntityLogicalCollectionName = "replicationbacklogs";
		
		public const string EntitySetName = "replicationbacklogs";
		
		public const int EntityTypeCode = 1140;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Additional data related to the replication backlog entry. For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("data")]
		public string Data
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("data");
			}
		}
		
		/// <summary>
		/// Unique identifier of the replication backlog entry.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("replicationbacklogid")]
		public System.Nullable<System.Guid> ReplicationBacklogId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("replicationbacklogid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("replicationbacklogid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				base.Id = value;
			}
		}
		
		/// <summary>
		/// The type of replication backlog.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("replicationbacklogtype")]
		public virtual ReplicationBacklog_ReplicationBacklogType? ReplicationBacklogType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ReplicationBacklog_ReplicationBacklogType?)(EntityOptionSetEnum.GetEnum(this, "replicationbacklogtype")));
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("targetdatacenterid")]
		public System.Nullable<System.Guid> TargetDatacenterId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("targetdatacenterid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the target object
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("targetobjectid")]
		public Microsoft.Xrm.Sdk.EntityReference TargetObjectId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("targetobjectid");
			}
		}
		
		/// <summary>
		/// N:1 replicationbacklog_target_report
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("targetobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("replicationbacklog_target_report")]
		public CrmEarlyBound.Report replicationbacklog_target_report
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Report>("replicationbacklog_target_report", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ReplicationBacklog(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["replicationbacklogid"] = base.Id;
                        break;
                    case "replicationbacklogid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}