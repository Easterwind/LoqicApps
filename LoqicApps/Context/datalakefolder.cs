//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum datalakefolderState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// A folder is a place to store data in Azure Data Lake.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("datalakefolder")]
	public partial class datalakefolder : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AccessType = "accesstype";
			public const string CDMPath = "cdmpath";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string containerendpoint = "containerendpoint";
			public const string ContributorSecurityGroupId = "contributorsecuritygroupid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string datalakefolder_UniqueName = "datalakefolder_uniquename";
			public const string datalakefolderId = "datalakefolderid";
			public const string Id = "datalakefolderid";
			public const string extendedproperties = "extendedproperties";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string iscustomercapacity = "iscustomercapacity";
			public const string IsCustomizable = "iscustomizable";
			public const string isdeepcopyenabled = "isdeepcopyenabled";
			public const string IsExternalLake = "isexternallake";
			public const string IsExternalLakeReadOnly = "isexternallakereadonly";
			public const string IsManaged = "ismanaged";
			public const string isprivate = "isprivate";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string owningappid = "owningappid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string parentfolderid = "parentfolderid";
			public const string path = "path";
			public const string ReaderSecurityGroupId = "readersecuritygroupid";
			public const string ResourceGroup = "resourcegroup";
			public const string SolutionId = "solutionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subscription = "subscription";
			public const string SynchronizeSchemaToDataverse = "synchronizeschematodataverse";
			public const string SynchronizeSchemaToSynapseDb = "synchronizeschematosynapsedb";
			public const string Tenant = "tenant";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string business_unit_datalakefolder = "business_unit_datalakefolder";
			public const string Referencingdatalakefolder_datalakesubfolder = "datalakefolder_datalakesubfolder";
			public const string lk_datalakefolder_createdby = "lk_datalakefolder_createdby";
			public const string lk_datalakefolder_createdonbehalfby = "lk_datalakefolder_createdonbehalfby";
			public const string lk_datalakefolder_modifiedby = "lk_datalakefolder_modifiedby";
			public const string lk_datalakefolder_modifiedonbehalfby = "lk_datalakefolder_modifiedonbehalfby";
			public const string owner_datalakefolder = "owner_datalakefolder";
			public const string team_datalakefolder = "team_datalakefolder";
			public const string user_datalakefolder = "user_datalakefolder";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public datalakefolder() : 
				base(EntityLogicalName)
		{
		}
		
		public const string AlternateKeys = "componentstate,datalakefolder_uniquename,overwritetime";
		
		public const string EntityLogicalName = "datalakefolder";
		
		public const string EntitySchemaName = "datalakefolder";
		
		public const string PrimaryIdAttribute = "datalakefolderid";
		
		public const string PrimaryNameAttribute = "name";
		
		public const string EntityLogicalCollectionName = "datalakefolders";
		
		public const string EntitySetName = "datalakefolders";
		
		public const int EntityTypeCode = 10027;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Azure Data Lake Access Type.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("accesstype")]
		public string AccessType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("accesstype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AccessType");
				this.SetAttributeValue("accesstype", value);
				this.OnPropertyChanged("AccessType");
			}
		}
		
		/// <summary>
		/// Path to the CDM file.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("cdmpath")]
		public string CDMPath
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("cdmpath");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CDMPath");
				this.SetAttributeValue("cdmpath", value);
				this.OnPropertyChanged("CDMPath");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentidunique")]
		public System.Nullable<System.Guid> ComponentIdUnique
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("componentidunique");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public virtual ComponentState? ComponentState
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ComponentState?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
			}
		}
		
		/// <summary>
		/// Azure Data Lake container endpoint for this folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("containerendpoint")]
		public string containerendpoint
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("containerendpoint");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("containerendpoint");
				this.SetAttributeValue("containerendpoint", value);
				this.OnPropertyChanged("containerendpoint");
			}
		}
		
		/// <summary>
		/// The security group for contributor access.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("contributorsecuritygroupid")]
		public System.Nullable<System.Guid> ContributorSecurityGroupId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("contributorsecuritygroupid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ContributorSecurityGroupId");
				this.SetAttributeValue("contributorsecuritygroupid", value);
				this.OnPropertyChanged("ContributorSecurityGroupId");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CreatedOnBehalfBy");
				this.SetAttributeValue("createdonbehalfby", value);
				this.OnPropertyChanged("CreatedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// Unique Name for the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("datalakefolder_uniquename")]
		public string datalakefolder_UniqueName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("datalakefolder_uniquename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_UniqueName");
				this.SetAttributeValue("datalakefolder_uniquename", value);
				this.OnPropertyChanged("datalakefolder_UniqueName");
			}
		}
		
		/// <summary>
		/// Unique identifier for entity instances
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("datalakefolderid")]
		public System.Nullable<System.Guid> datalakefolderId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("datalakefolderid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolderId");
				this.SetAttributeValue("datalakefolderid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("datalakefolderId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("datalakefolderid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.datalakefolderId = value;
			}
		}
		
		/// <summary>
		/// Extended Properties associated with this folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("extendedproperties")]
		public string extendedproperties
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("extendedproperties");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("extendedproperties");
				this.SetAttributeValue("extendedproperties", value);
				this.OnPropertyChanged("extendedproperties");
			}
		}
		
		/// <summary>
		/// Sequence number of the import that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ImportSequenceNumber");
				this.SetAttributeValue("importsequencenumber", value);
				this.OnPropertyChanged("ImportSequenceNumber");
			}
		}
		
		/// <summary>
		/// Indicates if folder data storage uses customer capacity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomercapacity")]
		public System.Nullable<bool> iscustomercapacity
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("iscustomercapacity");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("iscustomercapacity");
				this.SetAttributeValue("iscustomercapacity", value);
				this.OnPropertyChanged("iscustomercapacity");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
		public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsCustomizable");
				this.SetAttributeValue("iscustomizable", value);
				this.OnPropertyChanged("IsCustomizable");
			}
		}
		
		/// <summary>
		/// Indicates if deep copy is enabled for folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isdeepcopyenabled")]
		public System.Nullable<bool> isdeepcopyenabled
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isdeepcopyenabled");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("isdeepcopyenabled");
				this.SetAttributeValue("isdeepcopyenabled", value);
				this.OnPropertyChanged("isdeepcopyenabled");
			}
		}
		
		/// <summary>
		/// Indicates whether lake is managed or external.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isexternallake")]
		public System.Nullable<bool> IsExternalLake
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isexternallake");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsExternalLake");
				this.SetAttributeValue("isexternallake", value);
				this.OnPropertyChanged("IsExternalLake");
			}
		}
		
		/// <summary>
		/// Indicates whether external lake is read only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isexternallakereadonly")]
		public System.Nullable<bool> IsExternalLakeReadOnly
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isexternallakereadonly");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsExternalLakeReadOnly");
				this.SetAttributeValue("isexternallakereadonly", value);
				this.OnPropertyChanged("IsExternalLakeReadOnly");
			}
		}
		
		/// <summary>
		/// Indicates whether the solution component is part of a managed solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
		public System.Nullable<bool> IsManaged
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Indicates if folder data and metadata are visible to all applications, or only visible to the folder owner and applications with explicit permissions to the folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isprivate")]
		public System.Nullable<bool> isprivate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isprivate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("isprivate");
				this.SetAttributeValue("isprivate", value);
				this.OnPropertyChanged("isprivate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ModifiedOnBehalfBy");
				this.SetAttributeValue("modifiedonbehalfby", value);
				this.OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// The name of the custom entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("name");
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("OverriddenCreatedOn");
				this.SetAttributeValue("overriddencreatedon", value);
				this.OnPropertyChanged("OverriddenCreatedOn");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
		public System.Nullable<System.DateTime> OverwriteTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("OwnerId");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("OwnerId");
			}
		}
		
		/// <summary>
		/// The app id which owns this folder. The owning app id has full control i.e. read, write and execute permissions on the ADLS folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningappid")]
		public System.Nullable<System.Guid> owningappid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("owningappid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("owningappid");
				this.SetAttributeValue("owningappid", value);
				this.OnPropertyChanged("owningappid");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Unique identifier of the parent folder for this folder.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentfolderid")]
		public Microsoft.Xrm.Sdk.EntityReference parentfolderid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("parentfolderid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("parentfolderid");
				this.SetAttributeValue("parentfolderid", value);
				this.OnPropertyChanged("parentfolderid");
			}
		}
		
		/// <summary>
		/// Folder path in the Azure Data Lake container.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("path")]
		public string path
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("path");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("path");
				this.SetAttributeValue("path", value);
				this.OnPropertyChanged("path");
			}
		}
		
		/// <summary>
		/// The security group for reader access.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("readersecuritygroupid")]
		public System.Nullable<System.Guid> ReaderSecurityGroupId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("readersecuritygroupid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ReaderSecurityGroupId");
				this.SetAttributeValue("readersecuritygroupid", value);
				this.OnPropertyChanged("ReaderSecurityGroupId");
			}
		}
		
		/// <summary>
		/// Azure resource group of the storage account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("resourcegroup")]
		public string ResourceGroup
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("resourcegroup");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ResourceGroup");
				this.SetAttributeValue("resourcegroup", value);
				this.OnPropertyChanged("ResourceGroup");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
		public System.Nullable<System.Guid> SolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Status of the Data Lake Folder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public System.Nullable<CrmEarlyBound.datalakefolderState> StateCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("statecode");
				if ((optionSet != null))
				{
					return ((CrmEarlyBound.datalakefolderState)(System.Enum.ToObject(typeof(CrmEarlyBound.datalakefolderState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("StateCode");
				if ((value == null))
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
				}
				this.OnPropertyChanged("StateCode");
			}
		}
		
		/// <summary>
		/// Reason for the status of the Data Lake Folder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual datalakefolder_StatusCode? StatusCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((datalakefolder_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("StatusCode");
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("StatusCode");
			}
		}
		
		/// <summary>
		/// Azure subscription of the storage account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subscription")]
		public string Subscription
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("subscription");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Subscription");
				this.SetAttributeValue("subscription", value);
				this.OnPropertyChanged("Subscription");
			}
		}
		
		/// <summary>
		/// Enable schema synchronization to Dataverse.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("synchronizeschematodataverse")]
		public System.Nullable<bool> SynchronizeSchemaToDataverse
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("synchronizeschematodataverse");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SynchronizeSchemaToDataverse");
				this.SetAttributeValue("synchronizeschematodataverse", value);
				this.OnPropertyChanged("SynchronizeSchemaToDataverse");
			}
		}
		
		/// <summary>
		/// Enable schema synchronization to Synapse database.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("synchronizeschematosynapsedb")]
		public System.Nullable<bool> SynchronizeSchemaToSynapseDb
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("synchronizeschematosynapsedb");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SynchronizeSchemaToSynapseDb");
				this.SetAttributeValue("synchronizeschematosynapsedb", value);
				this.OnPropertyChanged("SynchronizeSchemaToSynapseDb");
			}
		}
		
		/// <summary>
		/// Azure tenant of the storage account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("tenant")]
		public string Tenant
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("tenant");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Tenant");
				this.SetAttributeValue("tenant", value);
				this.OnPropertyChanged("Tenant");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public System.Nullable<int> TimeZoneRuleVersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("timezoneruleversionnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("TimeZoneRuleVersionNumber");
				this.SetAttributeValue("timezoneruleversionnumber", value);
				this.OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}
		
		/// <summary>
		/// Time zone code that was in use when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public System.Nullable<int> UTCConversionTimeZoneCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("utcconversiontimezonecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UTCConversionTimeZoneCode");
				this.SetAttributeValue("utcconversiontimezonecode", value);
				this.OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}
		
		/// <summary>
		/// Version Number
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_AsyncOperations
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_AsyncOperations")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.AsyncOperation> datalakefolder_AsyncOperations
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.AsyncOperation>("datalakefolder_AsyncOperations", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_AsyncOperations");
				this.SetRelatedEntities<CrmEarlyBound.AsyncOperation>("datalakefolder_AsyncOperations", null, value);
				this.OnPropertyChanged("datalakefolder_AsyncOperations");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_BulkDeleteFailures
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_BulkDeleteFailures")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.BulkDeleteFailure> datalakefolder_BulkDeleteFailures
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.BulkDeleteFailure>("datalakefolder_BulkDeleteFailures", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_BulkDeleteFailures");
				this.SetRelatedEntities<CrmEarlyBound.BulkDeleteFailure>("datalakefolder_BulkDeleteFailures", null, value);
				this.OnPropertyChanged("datalakefolder_BulkDeleteFailures");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_datalakefolderpermission
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_datalakefolderpermission")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.datalakefolderpermission> datalakefolder_datalakefolderpermission
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.datalakefolderpermission>("datalakefolder_datalakefolderpermission", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_datalakefolderpermission");
				this.SetRelatedEntities<CrmEarlyBound.datalakefolderpermission>("datalakefolder_datalakefolderpermission", null, value);
				this.OnPropertyChanged("datalakefolder_datalakefolderpermission");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_datalakesubfolder
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.datalakefolder> Referenceddatalakefolder_datalakesubfolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.datalakefolder>("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referenced);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Referenceddatalakefolder_datalakesubfolder");
				this.SetRelatedEntities<CrmEarlyBound.datalakefolder>("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				this.OnPropertyChanged("Referenceddatalakefolder_datalakesubfolder");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_DuplicateBaseRecord
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_DuplicateBaseRecord")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.DuplicateRecord> datalakefolder_DuplicateBaseRecord
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.DuplicateRecord>("datalakefolder_DuplicateBaseRecord", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_DuplicateBaseRecord");
				this.SetRelatedEntities<CrmEarlyBound.DuplicateRecord>("datalakefolder_DuplicateBaseRecord", null, value);
				this.OnPropertyChanged("datalakefolder_DuplicateBaseRecord");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_DuplicateMatchingRecord
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_DuplicateMatchingRecord")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.DuplicateRecord> datalakefolder_DuplicateMatchingRecord
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.DuplicateRecord>("datalakefolder_DuplicateMatchingRecord", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_DuplicateMatchingRecord");
				this.SetRelatedEntities<CrmEarlyBound.DuplicateRecord>("datalakefolder_DuplicateMatchingRecord", null, value);
				this.OnPropertyChanged("datalakefolder_DuplicateMatchingRecord");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_MailboxTrackingFolders
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_MailboxTrackingFolders")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.MailboxTrackingFolder> datalakefolder_MailboxTrackingFolders
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.MailboxTrackingFolder>("datalakefolder_MailboxTrackingFolders", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_MailboxTrackingFolders");
				this.SetRelatedEntities<CrmEarlyBound.MailboxTrackingFolder>("datalakefolder_MailboxTrackingFolders", null, value);
				this.OnPropertyChanged("datalakefolder_MailboxTrackingFolders");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_PrincipalObjectAttributeAccesses
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_PrincipalObjectAttributeAccesses")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.PrincipalObjectAttributeAccess> datalakefolder_PrincipalObjectAttributeAccesses
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.PrincipalObjectAttributeAccess>("datalakefolder_PrincipalObjectAttributeAccesses", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_PrincipalObjectAttributeAccesses");
				this.SetRelatedEntities<CrmEarlyBound.PrincipalObjectAttributeAccess>("datalakefolder_PrincipalObjectAttributeAccesses", null, value);
				this.OnPropertyChanged("datalakefolder_PrincipalObjectAttributeAccesses");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_ProcessSession
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_ProcessSession")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.ProcessSession> datalakefolder_ProcessSession
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.ProcessSession>("datalakefolder_ProcessSession", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_ProcessSession");
				this.SetRelatedEntities<CrmEarlyBound.ProcessSession>("datalakefolder_ProcessSession", null, value);
				this.OnPropertyChanged("datalakefolder_ProcessSession");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_SyncErrors
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_SyncErrors")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.SyncError> datalakefolder_SyncErrors
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.SyncError>("datalakefolder_SyncErrors", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_SyncErrors");
				this.SetRelatedEntities<CrmEarlyBound.SyncError>("datalakefolder_SyncErrors", null, value);
				this.OnPropertyChanged("datalakefolder_SyncErrors");
			}
		}
		
		/// <summary>
		/// 1:N datalakefolder_UserEntityInstanceDatas
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_UserEntityInstanceDatas")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.UserEntityInstanceData> datalakefolder_UserEntityInstanceDatas
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("datalakefolder_UserEntityInstanceDatas", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("datalakefolder_UserEntityInstanceDatas");
				this.SetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("datalakefolder_UserEntityInstanceDatas", null, value);
				this.OnPropertyChanged("datalakefolder_UserEntityInstanceDatas");
			}
		}
		
		/// <summary>
		/// 1:N synapsedatabases
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("synapsedatabases")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.synapsedatabase> synapsedatabases
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.synapsedatabase>("synapsedatabases", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("synapsedatabases");
				this.SetRelatedEntities<CrmEarlyBound.synapsedatabase>("synapsedatabases", null, value);
				this.OnPropertyChanged("synapsedatabases");
			}
		}
		
		/// <summary>
		/// 1:N synapselinkexternaltablestates
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("synapselinkexternaltablestates")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.synapselinkexternaltablestate> synapselinkexternaltablestates
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.synapselinkexternaltablestate>("synapselinkexternaltablestates", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("synapselinkexternaltablestates");
				this.SetRelatedEntities<CrmEarlyBound.synapselinkexternaltablestate>("synapselinkexternaltablestates", null, value);
				this.OnPropertyChanged("synapselinkexternaltablestates");
			}
		}
		
		/// <summary>
		/// 1:N synapselinkprofiles
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("synapselinkprofiles")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.synapselinkprofile> synapselinkprofiles
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.synapselinkprofile>("synapselinkprofiles", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("synapselinkprofiles");
				this.SetRelatedEntities<CrmEarlyBound.synapselinkprofile>("synapselinkprofiles", null, value);
				this.OnPropertyChanged("synapselinkprofiles");
			}
		}
		
		/// <summary>
		/// N:1 business_unit_datalakefolder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("business_unit_datalakefolder")]
		public CrmEarlyBound.BusinessUnit business_unit_datalakefolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.BusinessUnit>("business_unit_datalakefolder", null);
			}
		}
		
		/// <summary>
		/// N:1 datalakefolder_datalakesubfolder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentfolderid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
		public CrmEarlyBound.datalakefolder Referencingdatalakefolder_datalakesubfolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.datalakefolder>("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Referencingdatalakefolder_datalakesubfolder");
				this.SetRelatedEntity<CrmEarlyBound.datalakefolder>("datalakefolder_datalakesubfolder", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				this.OnPropertyChanged("Referencingdatalakefolder_datalakesubfolder");
			}
		}
		
		/// <summary>
		/// N:1 lk_datalakefolder_createdby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_datalakefolder_createdby")]
		public CrmEarlyBound.SystemUser lk_datalakefolder_createdby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_createdby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_datalakefolder_createdonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_datalakefolder_createdonbehalfby")]
		public CrmEarlyBound.SystemUser lk_datalakefolder_createdonbehalfby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_createdonbehalfby", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("lk_datalakefolder_createdonbehalfby");
				this.SetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_createdonbehalfby", null, value);
				this.OnPropertyChanged("lk_datalakefolder_createdonbehalfby");
			}
		}
		
		/// <summary>
		/// N:1 lk_datalakefolder_modifiedby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_datalakefolder_modifiedby")]
		public CrmEarlyBound.SystemUser lk_datalakefolder_modifiedby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_modifiedby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_datalakefolder_modifiedonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_datalakefolder_modifiedonbehalfby")]
		public CrmEarlyBound.SystemUser lk_datalakefolder_modifiedonbehalfby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_modifiedonbehalfby", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("lk_datalakefolder_modifiedonbehalfby");
				this.SetRelatedEntity<CrmEarlyBound.SystemUser>("lk_datalakefolder_modifiedonbehalfby", null, value);
				this.OnPropertyChanged("lk_datalakefolder_modifiedonbehalfby");
			}
		}
		
		/// <summary>
		/// N:1 owner_datalakefolder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("owner_datalakefolder")]
		public CrmEarlyBound.Owner owner_datalakefolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Owner>("owner_datalakefolder", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("owner_datalakefolder");
				this.SetRelatedEntity<CrmEarlyBound.Owner>("owner_datalakefolder", null, value);
				this.OnPropertyChanged("owner_datalakefolder");
			}
		}
		
		/// <summary>
		/// N:1 team_datalakefolder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("team_datalakefolder")]
		public CrmEarlyBound.Team team_datalakefolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Team>("team_datalakefolder", null);
			}
		}
		
		/// <summary>
		/// N:1 user_datalakefolder
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("user_datalakefolder")]
		public CrmEarlyBound.SystemUser user_datalakefolder
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.SystemUser>("user_datalakefolder", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public datalakefolder(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["datalakefolderid"] = base.Id;
                        break;
                    case "datalakefolderid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}