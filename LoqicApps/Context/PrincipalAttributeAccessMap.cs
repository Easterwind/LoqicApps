//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CrmEarlyBound
{
	
	/// <summary>
	/// Maps security principals (users and teams) to secured field access rights.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalattributeaccessmap")]
	public partial class PrincipalAttributeAccessMap : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AttributeId = "attributeid";
			public const string CreateAccess = "createaccess";
			public const string PrincipalAttributeAccessMapId = "principalattributeaccessmapid";
			public const string Id = "principalattributeaccessmapid";
			public const string PrincipalId = "principalid";
			public const string ReadAccess = "readaccess";
			public const string UpdateAccess = "updateaccess";
			public const string VersionNumber = "versionnumber";
			public const string owner_principalattributeaccessmap = "owner_principalattributeaccessmap";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "principalattributeaccessmap";
		
		public const string EntitySchemaName = "PrincipalAttributeAccessMap";
		
		public const string PrimaryIdAttribute = "principalattributeaccessmapid";
		
		public const string EntityLogicalCollectionName = "principalattributeaccessmaps";
		
		public const string EntitySetName = "principalattributeaccessmaps";
		
		public const int EntityTypeCode = 43;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("attributeid")]
		public System.Nullable<System.Guid> AttributeId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("attributeid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AttributeId");
				this.SetAttributeValue("attributeid", value);
				this.OnPropertyChanged("AttributeId");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createaccess")]
		public virtual Field_Security_Permission_Type? CreateAccess
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Field_Security_Permission_Type?)(EntityOptionSetEnum.GetEnum(this, "createaccess")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CreateAccess");
				this.SetAttributeValue("createaccess", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("CreateAccess");
			}
		}
		
		/// <summary>
		/// Unique identifier of the principal attribute access.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalattributeaccessmapid")]
		public System.Nullable<System.Guid> PrincipalAttributeAccessMapId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("principalattributeaccessmapid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("PrincipalAttributeAccessMapId");
				this.SetAttributeValue("principalattributeaccessmapid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("PrincipalAttributeAccessMapId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalattributeaccessmapid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.PrincipalAttributeAccessMapId = value;
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalid")]
		public System.Nullable<System.Guid> PrincipalId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("principalid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("PrincipalId");
				this.SetAttributeValue("principalid", value);
				this.OnPropertyChanged("PrincipalId");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("readaccess")]
		public virtual Field_Security_Permission_Type? ReadAccess
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Field_Security_Permission_Type?)(EntityOptionSetEnum.GetEnum(this, "readaccess")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ReadAccess");
				this.SetAttributeValue("readaccess", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("ReadAccess");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("updateaccess")]
		public virtual Field_Security_Permission_Type? UpdateAccess
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Field_Security_Permission_Type?)(EntityOptionSetEnum.GetEnum(this, "updateaccess")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UpdateAccess");
				this.SetAttributeValue("updateaccess", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("UpdateAccess");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N userentityinstancedata_principalattributeaccessmap
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_principalattributeaccessmap")]
		public System.Collections.Generic.IEnumerable<CrmEarlyBound.UserEntityInstanceData> userentityinstancedata_principalattributeaccessmap
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_principalattributeaccessmap", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("userentityinstancedata_principalattributeaccessmap");
				this.SetRelatedEntities<CrmEarlyBound.UserEntityInstanceData>("userentityinstancedata_principalattributeaccessmap", null, value);
				this.OnPropertyChanged("userentityinstancedata_principalattributeaccessmap");
			}
		}
		
		/// <summary>
		/// N:1 owner_principalattributeaccessmap
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("principalid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("owner_principalattributeaccessmap")]
		public CrmEarlyBound.Owner owner_principalattributeaccessmap
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<CrmEarlyBound.Owner>("owner_principalattributeaccessmap", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("owner_principalattributeaccessmap");
				this.SetRelatedEntity<CrmEarlyBound.Owner>("owner_principalattributeaccessmap", null, value);
				this.OnPropertyChanged("owner_principalattributeaccessmap");
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["principalattributeaccessmapid"] = base.Id;
                        break;
                    case "principalattributeaccessmapid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}